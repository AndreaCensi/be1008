---- model rawseeds_laser_bgds_predict
''' Compares the laser BGDS prediction with reality.     

    Uses :ref:`block:rawseeds_synchronized_laser` as a source. 
    
'''
config logdir                              "Directory containing Rawseeds logs."
config prefix   = laser_bgds_predict       "Subdirectory inside logdir where to put files."
config grad_op  = identity                 "Scalar operation after gradient."
config deriv_op = identity                 "Scalar operation after derivative."
config tensors  = 'out/laser_bgds_boot/GS_DS:GB.pickle'        "Tensors configuration to use."
config fps = 12  'Frames per second'

import procgraph_rawseeds

outdir = "${logdir}/out/${prefix}"

''' Data sources

    Get the data from the the Rawseeds sources. 
'''
    |rawseeds_synchronized_laser fps=$fps logdir=$logdir| --> y
    |odometry:RawseedsOdo| --> |fps_data_limit fps=30| --> odometry --> |pose2commands| --> commands
    odometry.file = "${logdir}/ODOMETRY_XYT.csv.bz2"
    
    ''' Camera data (for visualization purposes only.) 
    
        We flip the data because of the mirror, so we can superimpose it to the 
        range finder data.
    '''
    |omni:RawseedsCam dir = "${logdir}/OMNI"| --> |resize width=320| --> |flipud| --> omni


''' Data pre-processing.

    We pre-process the data with given blocks ``deriv_op`` and ``grad_op``. 

'''
    y --> |derivative2| --> |deriv_op_block:$deriv_op | --> y_dot
    y --> |gradient1d| --> |grad_op_block:$grad_op| --> gy

''' Prediction. '''
    gy[gy], y_dot[y_dot], commands[commands] --> |sync| --> |bgds_1d_predictor| --> y_dot_pred, error
    bgds_1d_predictor.BG = '${logdir}/../${tensors}'

    ''' Detection signal '''
    y_dot, y_dot_pred --> |sync| --> |*|  --> |minimum threshold=0| --> |gain k=-1|  --> detect  

''' Visualization '''

    ''' Data extraction 

        Extract the sick part, we are not interested in the Hokuyo.
    '''
        y          --> |sick_extract|--> y_sick
        gy         --> |sick_extract|--> gy_sick
        y_dot      --> |sick_extract|--> y_dot_sick
        y_dot_pred --> |sick_extract|--> y_dot_pred_sick 
        detect     --> |sick_extract|--> error_sick

    ''' These variable describes the Sick sensor configuration. '''
        sick_groups = [{ indices: [0,180], theta: [-1.57,+1.57], color: 'r.', origin: [0,0,0]}, { indices: [161,361], theta: [+1.57,+4.71], color: 'b.', origin: [0,0,-0.2]}]
        sick_groups_lines = [{ indices: [0,180], theta: [-1.57,+1.57], color: 'r', origin: [0,0,0]}, { indices: [161,361], theta: [+1.57,+4.71], color: 'b', origin: [0,0,-0.2]}]

    # Limit the readings to 20m
#    y_sick     --> |laser_display     title='readings'   max_readings=20 groups=$sick_groups_lines| --> y_sick_rgb
    
    y_dot_sick --> |smooth_and_scale| --> |laser_dot_display title='derivative (polar)' groups=$sick_groups| --> y_dot_sick_rgb
    gy_sick    --> |smooth_and_scale| --> |laser_dot_display title='gradient (polar)'  groups=$sick_groups| --> gy_sick_rgb
    
                   
    y_dot_sick      --> |smooth_and_scale| --> |plot height=320 symmetric=1 title=derivative format='-'| --> y_dot_rgb
    y_dot_pred_sick --> |smooth_and_scale| --> |plot height=320 symmetric=1 title=prediction format='-'| --> y_dot_pred_rgb
    y_dot_pred_sick -->  |smooth_and_scale| --> |laser_dot_display groups=$sick_groups   title='prediction (polar)'   | --> error_rgb
#    error_sick      --> |skim percent=2| --> |low_pass alpha=0.5| -->  |normalize_Linf| --> |laser_dot_display  groups=$sick_groups title='error (polar)'| --> error_rgb2
    
 

    y_sick     --> |laser_display title=''   max_readings=20 groups=$sick_groups_lines transparent=True|  --> y_sick_rgba
#    error_sick --> |skim percent=2| --> |low_pass alpha=0.5| --> |normalize_Linf| --> |laser_dot_display  groups=$sick_groups title='' transparent=1| --> error_rgba
    error_sick -->  |skim percent=2| -->  |normalize_Linf| --> |laser_dot_display R0=0.1 amp=1 groups=$sick_groups_lines title='' transparent=1| --> error_rgba
    
        y_text.texts = [{string: 'readings', position: [middle, 5], halign: center, size: 18, color: white, bg: black}]
        error_text.texts = [{string: 'detection', position: [middle, 5], halign: center, size: 18, color: white, bg: black}]
    
    omni, y_sick_rgba --> |sync| --> |blend| -->  |    y_text:text| --> omni_plus_y
    omni, error_rgba  --> |sync| --> |blend| -->  |error_text:text| --> omni_plus_error

    omni_plus_y,  y_dot_rgb, y_dot_sick_rgb, gy_sick_rgb, omni_plus_error, y_dot_pred_rgb, error_rgb --> |sync| --> |grid cols=4| --> rgb


    rgb --> |watermark logdir=$logdir title='Range data and BGDS prediction'|--> |mencoder vbitrate=2000000 file='${outdir}/movie.avi'|
    
    y,gy,y_dot,y_dot_pred,detect --> |sync| --> |memories logdir=$logdir other={logdir:$logdir, grad_op:$grad_op, deriv_op:$deriv_op, tensors:$tensors} prefix=$outdir |
    
    
--- model smooth_and_scale
''' A primitive way of having better display. '''
input x 'Some sequence of values'
output y 'Smoothed, scaled version of x.'

|input name=x| --> |smooth1d| -->   |normalize_Linf| --> |output name=y|

#|input name=x| -->   |normalize_Linf| --> |output name=y|
  
--- model rawseeds_laser_bgds_predict_all
config logdir                              "Directory containing Rawseeds logs."

#|rawseeds_laser_bgds_predict logdir=$logdir  prefix='laser_bgds_predict/manual2' grad_op=smooth1d deriv_op=smooth1d tensors='out/laser_bgds_boot/GI_DI:GB.pickle' fps=6 grad_op_block.window_len=8|


# OK, this is the first with reasonable results
#|rawseeds_laser_bgds_predict logdir=$logdir  prefix='laser_bgds_predict/manuali' grad_op=smooth1d deriv_op=smooth1d tensors='out/laser_bgds_boot/GI_DI:GB.pickle' fps=6|

#|rawseeds_laser_bgds_predict logdir=$logdir  prefix='laser_bgds_predict/II_fps6_smooth3' grad_op=smooth1d deriv_op=smooth1d tensors='out/laser_bgds_boot/GI_DI:GB.pickle' fps=6 smooth1d.window_len=3|
|rawseeds_laser_bgds_predict logdir=$logdir  prefix='laser_bgds_predict/II_fps6_smooth8' grad_op=smooth1d deriv_op=smooth1d tensors='out/laser_bgds_boot/GI_DI:GB.pickle' fps=6 grad_op_block.window_len=8|
#|rawseeds_laser_bgds_predict logdir=$logdir  prefix='laser_bgds_predict/II_fps6_smooth11' grad_op=smooth1d deriv_op=smooth1d tensors='out/laser_bgds_boot/GI_DI:GB.pickle' fps=6 smooth1d.window_len=11|
#|rawseeds_laser_bgds_predict logdir=$logdir  prefix='laser_bgds_predict/II_fps12_smooth3' grad_op=smooth1d deriv_op=smooth1d tensors='out/laser_bgds_boot/GI_DI:GB.pickle' fps=12 grad_op_block.window_len=3|

#|rawseeds_laser_bgds_predict logdir=$logdir  prefix='laser_bgds_predict/II_fps12_smooth8' grad_op=smooth1d deriv_op=smooth1d tensors='out/laser_bgds_boot/GI_DI:GB.pickle' fps=12 smooth1d.window_len=8|
#|rawseeds_laser_bgds_predict logdir=$logdir  prefix='laser_bgds_predict/II_fps12_smooth11' grad_op=smooth1d deriv_op=smooth1d tensors='out/laser_bgds_boot/GI_DI:GB.pickle' fps=12 smooth1d.window_len=11|
 


# 
# |rawseeds_laser_bgds_predict logdir=$logdir  prefix='laser_bgds_predict/GI_DI-II' grad_op=identity deriv_op=identity tensors='GI_DI:GB.pickle'|
# 
# |rawseeds_laser_bgds_predict logdir=$logdir  prefix='laser_bgds_predict/GI_DI-IF' grad_op=identity deriv_op=deriv_filter tensors='GI_DI:GB.pickle'|

# |rawseeds_laser_bgds_predict logdir=$logdir  prefix='laser_bgds_predict/GS_DS-SS' grad_op=sign deriv_op=sign tensors='GS_DS:GB.pickle'|

# |rawseeds_laser_bgds_predict logdir=$logdir  prefix='laser_bgds_predict/GS_DS-SF' grad_op=sign deriv_op=deriv_filter tensors='GS_DS:GB.pickle'|
# 
# 
# |rawseeds_laser_bgds_predict logdir=$logdir  prefix='laser_bgds_predict/GS_DS-II' grad_op=identity deriv_op=identity tensors='GS_DS:GB.pickle'|

--- model my_filter

|input name=x| --> |low_pass alpha=0.5| --> |sign| -->  |low_pass alpha=0.5|  --> |output name=y|

--- model deriv_filter
|input name=x| --> |sign|--> |low_pass alpha=0.1| ---> |output name=y|



