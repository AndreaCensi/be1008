---- model rawseeds_camera_bgds_predict
''' Compares the BGDS prediction with reality.     

    Uses rawseeds_synchronized_camera as a source. '''
config logdir                              "Directory containing Rawseeds logs."
config prefix   = camera_bgds_predict      "Subdirectory inside logdir where to put files."
config image_op = rgb2gray                 "How to obtain a scalar from RGB"
config grad_op  = identity                 "Scalar operation after gradient."
config deriv_op = identity                 "Scalar operation after derivative."
config tensors = "out/camera_bgds_boot/gray_GI_DI:G.pickle" '''Tensor to use. path relative to ``logdir/..``. '''


outdir = "${logdir}/out/${prefix}"

import procgraph_rawseeds
import procgraph.components.cv


|rawseeds_synchronized_camera logdir=$logdir| --> raw_rgb --> |image_op:$image_op|--> y
|odometry:RawseedsOdo| --> |fps_data_limit fps=30| --> odometry --> |pose2commands| --> commands
odometry.file = "${logdir}/ODOMETRY_XYT.csv.bz2"


y --> |derivative2| --> |$deriv_op | --> y_dot
y --> |gradient| --> gxp, gyp

gxp --> |$grad_op| --> gx
gyp --> |$grad_op| --> gy



gx[gx], gy[gy], y_dot[y_dot], commands[commands] --> |sync| --> |bgds_predictor| --> y_dot_pred, error

#error --> |print|

bgds_predictor.G = '${logdir}/../${tensors}'


    y_dot      --> |posneg| --> |resize width=580| --> |image_label title="Observed dy/dt"| --> y_dot_rgb
    y_dot_pred --> |posneg| --> |resize width=580| --> |image_label title="Predicted dy/dt"| --> y_dot_pred_rgb


    error      --> |scale| --> error_rgb
    error --> |low_pass alpha=0.2| --> |scale| --> error_rgb2
    

    
    y_dot_rgb, y_dot_pred_rgb --> |sync| --> |grid cols=2| --> |watermark logdir=$logdir title='Derivative vs BGDS  prediction'| --> |mencoder vbitrate=2000000 file='${outdir}/y_dot.avi'|
    
#    error_rgb, error_rgb2 --> |sync| --> |grid cols=2| --> |mencoder  vbitrate=2000000 file='${outdir}/error.avi'| 
    
    y_dot --> |smooth gaussian_std=2| --> y_dot_s
    y_dot_pred --> |smooth gaussian_std=2| --> y_dot_pred_s
    
    
    
    y_dot_s, y_dot_pred_s --> |sync| --> |*| -->  detect --> |minimum threshold=0| --> |gain k=-1|  --> prod --> |scale| --> prod_rgb
    
    
# Compute and display statistics
w = 400
h = 200
T = 60
      #prod --> |count_less_than_zero| --> success --> |historyt interval=$T| --> |plot title='percentage' width=$w height=$h y_min=0 y_max=1 | --> success_rgb
      prod --> |max| --> |fps_data_limit fps=3|-->  |historyt interval=$T| --> |plot title='Maximum' y_min=0 width=$w height=$h| -->  maximum_rgb
      prod --> |sum| -->  |fps_data_limit fps=3|--> |historyt interval=$T| --> |plot title='Sum' y_min=0 width=$w height=$h| --> sum_rgb
      
      #success_rgb, maximum_rgb, sum_rgb --> |sync| --> |grid cols=3| --> stats
      maximum_rgb, sum_rgb --> |sync| --> |grid cols=3| --> stats
      
      # no sync here
      prod_rgb, stats --> |grid cols=1| -->  |watermark logdir=$logdir title='Detected inconsistencies using BGDS model'| --> |mencoder  vbitrate=2000000 file='${outdir}/prod_stats.avi'| 

      
      
#    success_history --> |plot title='Success fraction'| --> success_history_rgb


#    prod, success_history_rgb --> |sync| --> |grid cols=1| --> 
    
    prod_rgb --> |watermark logdir=$logdir title='Detected inconsistencies using BGDS model'| --> |mencoder  vbitrate=2000000 file='${outdir}/prod.avi'| 
   
    
    # Save some memories of this beautiful day
    raw_rgb, y, gx, gy, y_dot, y_dot_pred, y_dot_s, y_dot_pred_s, prod --> |sync| --> |memories logdir=$logdir  other={logdir:$logdir} prefix=$outdir|
    
    
---- model rawseeds_camera_bgds_predict_all
config logdir "Rawseeds log directory"

# GOOD ONES -- just disabled temporarely
#|rawseeds_camera_bgds_predict logdir=$logdir prefix="camera_bgds_predict/gray_GS_DS" tensors="out/camera_bgds_boot/gray_GS_DS:G.pickle"| 
#|rawseeds_camera_bgds_predict logdir=$logdir prefix="camera_bgds_predict/gray_GI_DI" tensors="out/camera_bgds_boot/gray_GI_DI:G.pickle"| 

|rawseeds_camera_bgds_predict logdir=$logdir prefix="camera_bgds_predict/contrast_GS_DS" tensors="out/camera_bgds_boot/contrast_GS_DS:G.pickle"| 
    
    
    